{"version":3,"sources":["actions/media_actions.js","actions/types.js","components/SearchBar.js","components/ToggleDisplay.js","actions/display_actions.js","components/SliderMedia.js","components/Slider.js","components/ListMedia.js","components/List.js","components/Display.js","App.js","reducers/media_reducer.js","reducers/index.js","reducers/display_reducer.js","store/index.js","serviceWorker.js","index.js"],"names":["fetchMedia","type","payload","DATA","data","SearchBar","state","search","onChangeText","event","value","target","_this","setState","props","searchMedia","submitSearch","react_default","a","createElement","className","this","name","placeholder","onChange","src","alt","Component","connect","filter","toLowerCase","m","includes","ToggleDisplay","label","displaySelect","_this$props","display","buttonSize","windowWidth","sliderButtonStyle","selectedButtonStyle","unselectedButtonStyle","listButtonStyle","Button_default","style","variant","size","onClick","fontSize","backgroundColor","color","marginLeft","width","windowSize","SliderMedia","_ref","media","show","backgroundImage","imgSource","concat","Slider","slidesToShow","nuka_carousel_es","wrapAround","framePadding","cellSpacing","renderBottomCenterControls","map","src_components_SliderMedia","key","id","ListMedia","List","src_components_ListMedia","Display","src_components_Slider","src_components_List","App","src_components_SearchBar","src_components_ToggleDisplay","src_components_Display","INITIAL_STATE","combineReducers","arguments","length","undefined","action","store","createStore","reducers","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea407729.chunk.js","sourcesContent":["import { FETCH_MEDIA } from './types';\nimport DATA from '../data.json';\n\nexport const fetchMedia = () => {\n  return ({\n    type: FETCH_MEDIA,\n    payload: DATA.data\n  })\n}\n\nexport const searchMedia = (search) => {\n  if (search === \"\") {\n    return ({\n      type: FETCH_MEDIA,\n      payload: DATA.data\n    })\n  }\n\n  const filter = search.toLowerCase();\n  const data = DATA.data.filter(m => m.name.toLowerCase().includes(filter));\n\n  return ({\n    type: FETCH_MEDIA,\n    payload: data\n  })\n}\n","export const DISPLAY_SELECT = 'TOGGLE_SELECT';\nexport const FETCH_MEDIA = 'FETCH_MEDIA';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchMedia, searchMedia } from '../actions';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  state = { search: \"\" }\n\n  onChangeText = (event) => {\n    const { value } = event.target;\n    this.setState({ search: value });\n    this.props.searchMedia(value);\n  }\n\n  submitSearch = (event) => {\n    this.props.searchMedia(this.state.search);\n  }\n\n  render() {\n    return (\n      <div className=\"Search-bar-container\">\n\n        <div className=\"Search-bar-div\">\n          <input\n            className=\"Search-bar-input\"\n            value={this.state.search}\n            type=\"text\"\n            name=\"name\"\n            placeholder='Search \"Walmart\"'\n            onChange={this.onChangeText}\n          />\n        <img src=\"/images/iconSearch.svg\" className=\"Search-bar-icon\" alt=\"logo\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { fetchMedia, searchMedia })(SearchBar);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport windowSize from 'react-window-size';\n\nimport './ToggleDisplay.css';\nimport { displaySelect } from '../actions';\n\nclass ToggleDisplay extends Component {\n  onClick(label) {\n    this.props.displaySelect(label);\n  }\n\n  render() {\n    const { display, windowWidth } = this.props;\n    const buttonSize = windowWidth > 500 ? \"large\" : \"small\";\n\n    const sliderButtonStyle = display === 'Slider' ?\n      selectedButtonStyle : unselectedButtonStyle;\n\n    const listButtonStyle = display === 'List' ?\n      selectedButtonStyle : unselectedButtonStyle;\n\n    return (\n      <div className=\"Toggle-display-container\">\n        <div className=\"Toggle-display-div\">\n          <label className=\"Toggle-display-label\">Toggle Display</label>\n          <Button\n            style={sliderButtonStyle}\n            variant=\"contained\"\n            size={buttonSize}\n            onClick={() => this.onClick('Slider')}\n          >\n            Slider\n          </Button>\n          <Button\n            style={listButtonStyle}\n            variant=\"contained\"\n            size={buttonSize}\n            onClick={() => this.onClick('List')}\n          >\n            List\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst selectedButtonStyle = {\n  fontSize: '10px',\n  backgroundColor: 'rgba(0,0,131)',\n  color: 'white',\n  marginLeft: '9px',\n  width: '80px',\n}\n\nconst unselectedButtonStyle = {\n  fontSize: '10px',\n  backgroundColor: 'white',\n  color: 'rgba(0,0,131)',\n  marginLeft: '9px',\n  width: '80px',\n}\n\nconst mapStateToProps = (state) => {\n  const { display } = state;\n  return {\n    display\n  };\n};\n\nexport default connect(mapStateToProps, { displaySelect })(windowSize(ToggleDisplay));\n","import { DISPLAY_SELECT } from './types';\n\nexport const displaySelect = (display) => {\n  return ({\n    type: DISPLAY_SELECT,\n    payload: display\n  });\n};\n","import React from 'react';\n\nimport './SliderMedia.css';\n\nconst SliderMedia = ({ media }) => {\n  const { name, show, backgroundImage } = media;\n  const imgSource = `images/${backgroundImage}`;\n\n  return (\n    <div className=\"Slider-media-div\">\n      <img src={imgSource} className=\"Slider-media-image\" alt=\"media\" />\n      <div className=\"Slider-labels-div\">\n        <label className=\"Slider-label-show\">{show}</label>\n        <label className=\"Slider-label-name\">{name}</label>\n      </div>\n    </div>\n  )\n}\n\nexport default SliderMedia;\n","import React from 'react';\nimport Carousel from 'nuka-carousel';\n\nimport SliderMedia from './SliderMedia';\nimport './Slider.css';\n\nconst Slider = ({ media, windowWidth }) => {\n  const slidesToShow = windowWidth > 500 ? 4 : 1;\n\n  return (\n    <div className=\"Slider-div\">\n      <div className=\"Slider-headline-div\">\n        <label className=\"Slider-headline\">Headline</label>\n      </div>\n      <Carousel\n        wrapAround={true}\n        slidesToShow={slidesToShow}\n        framePadding=\"20px\"\n        cellSpacing={30}\n        renderBottomCenterControls={() => false}\n        width=\"85%\"\n      >\n\n        { media.map((m) => <SliderMedia media={m} key={m.id}/>) }\n\n      </Carousel>\n    </div>\n  )\n}\n\nexport default Slider;\n","import React from 'react';\n\nimport './ListMedia.css';\n\nconst ListMedia = ({ media }) => {\n  const { name, show, backgroundImage } = media;\n  const imgSource = `/images/${backgroundImage}`;\n\n  return (\n    <div className=\"List-media-div\">\n      <img src={imgSource} className=\"List-media-image\" alt=\"media\" />\n      <div className=\"List-labels-div\">\n        <label className=\"List-label-show\">{show}</label>\n        <label className=\"List-label-name\">{name}</label>\n      </div>\n    </div>\n  )\n}\n\nexport default ListMedia;\n","import React from 'react';\n\nimport ListMedia from './ListMedia';\nimport './List.css';\n\nconst List = ({ media }) => {\n  return (\n    <div className=\"List-div\">\n      <label className=\"List-headline\">Headline</label>\n      { media.map((m) => <ListMedia media={m} key={m.id}/>) }\n    </div>\n  )\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport windowSize from 'react-window-size';\n\nimport { fetchMedia } from '../actions';\nimport Slider from './Slider';\nimport List from './List';\nimport './Display.css';\n\nclass Display extends Component {\n  componentDidMount() {\n    this.props.fetchMedia();\n  }\n\n  render() {\n    const { media, windowWidth } = this.props;\n    return (\n      <div>\n        {\n          this.props.display === 'Slider' ?\n          <div className=\"Slider-container\">\n            <Slider media={media} windowWidth={windowWidth} />\n          </div>\n          :\n          <div className=\"List-container\">\n            <List media={this.props.media} />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { display, media } = state;\n\n  return { display, media };\n};\n\nexport default connect(mapStateToProps, { fetchMedia })(windowSize(Display));\n","import React from 'react';\n\nimport SearchBar from './components/SearchBar';\nimport ToggleDisplay from './components/ToggleDisplay';\nimport Display from './components/Display';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"/images/section4Logo.svg\" className=\"App-logo\" alt=\"logo\" />\n        <SearchBar />\n      </header>\n      <div className=\"App-body\">\n        <ToggleDisplay />\n        <Display />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { FETCH_MEDIA } from '../actions/types';\n\nconst INITIAL_STATE = [];\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_MEDIA:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport display from './display_reducer';\nimport media from './media_reducer';\n\n\nexport default combineReducers({\n  display,\n  media\n});\n","import { DISPLAY_SELECT } from '../actions/types';\n\nconst INITIAL_STATE = 'Slider';\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DISPLAY_SELECT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport reducers from '../reducers';\n\nconst store = createStore(\n  reducers,\n  {}\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}